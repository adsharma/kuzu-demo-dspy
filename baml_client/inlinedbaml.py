###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n  \nclient<llm> Gemini2Flash {\n  provider google-ai\n  options {\n    model \"gemini-2.0-flash\"\n    api_key env.GOOGLE_API_KEY\n  }\n}\n\nclient<llm> OpenRouterClaude35Sonnet {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"anthropic/claude-3.5-sonnet\"\n    headers {\n      \"HTTP-Referer\" \"https://kuzudb.com\" // Optional\n      \"X-Title\" \"Kuzu\" // Optional\n    }\n  }\n}\n\nclient<llm> OpenRouterGPT4oMini {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-4o-mini\"\n    headers {\n      \"HTTP-Referer\" \"https://kuzudb.com\" // Optional\n      \"X-Title\" \"Kuzu\" // Optional\n    }\n  }\n}\n\nclient<llm> Claude {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20240620\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> FastAnthropic {\n  provider anthropic\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> FastOpenAI {\n  provider openai\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Fast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    // Learn more at https://docs.boundaryml.com/docs/snippets/clients/round-robin\n    strategy [FastAnthropic, FastOpenAI]\n  }\n}\n\nclient<llm> Openai {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    // Learn more at https://docs.boundaryml.com/docs/snippets/clients/fallback\n    strategy [GPT4o, FastOpenAI]\n  }\n}",
    "generators.baml": "\n// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"python/pydantic\"\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.77.0\"\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    // Regardless of this setting, you can always explicitly call either of the following:\n    // - b.sync.FunctionName()\n    // - b.async_.FunctionName() (note the underscore to avoid a keyword conflict)\n    default_client_mode sync\n}   ",
    "medicines.baml": "class Medicine {\n    generic_name string\n    brand_names string[]\n    // This entire item will only stream when complete\n    @@stream.done\n}\n\nclass ConditionAndMedicine {\n    condition string\n    medicine Medicine[]\n    side_effects string[]\n}\n\nfunction ExtractFromImage(img: image) -> ConditionAndMedicine[] {\n  client OpenRouterGPT4oMini\n  prompt #\"\n    Extract the condition, medicine names and side effects from the provided table with these columns:\n    - Reason for medicine\n    - Medicine names: Generic name & (Brand name)\n    - Side effects\n\n    {{ ctx.output_format }}\n\n    DO NOT INCLUDE QUOTES IN YOUR JSON RESPONSE.\n\n    {{ _.role(\"user\") }}\n    {{ img }}\n  \"#\n}\n\ntest TestOne {\n  functions [ExtractFromImage]\n  args {\n    img {\n      file \"../../files/images/medicine_1.png\"\n    }\n  }\n}\n",
    "notes.baml": "class Medication {\n  name string\n  dosage string @description(\"Dosage of the medication\")\n  frequency string @description(\"Frequency of the medication\")\n}\n\nclass PatientInfo {\n  patient_id string\n  medication Medication\n  side_effects string[]\n}\n\nfunction ExtractMedicationInfo(notes: string) -> PatientInfo[] {\n  client OpenRouterGPT4oMini\n  prompt #\"\n    Extract the medication information from the following nurse's notes.\n    Include only documented side effects, not vital signs or observations.\n    When listing a side effect, DO NOT list its intensity: ONLY report the name of the side effect.\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} {{ notes }}\n  \"#\n}\n\ntest TestWithVitalSigns {\n  functions [ExtractMedicationInfo]\n  args {\n    notes #\"\n      Patient ID: X7F3Q\n      Medication: Ramipril 5mg PO daily\n      Side Effects: Patient reports persistent dry cough and occasional dizziness when standing.\n      BP reduced from 156/92 to 132/78. No angioedema observed. Will continue to monitor for hypotension.\n    \"#\n  }\n}\n\ntest TestNegation {\n  functions [ExtractMedicationInfo]\n  args {\n    notes #\"\n      Patient ID: L9M2W\n      Medication: Metformin 1000mg BID\n      Side Effects: Reports mild nausea after morning dose. Denies diarrhea. Blood sugar levels stable.\n    \"#\n  }\n}",
}

def get_baml_files():
    return file_map